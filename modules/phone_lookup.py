import requests
import re
from core.output import print_info, print_success, print_error, print_warning, create_table

def investigate(phone, args):
    results = {"phone": phone, "carrier": "", "region": "", "social_mentions": []}
    
    print_info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ–¥–∫—É –ø–æ –Ω–æ–º–µ—Ä—É: {phone}")
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    clean_phone = re.sub(r'[^0-9+]', '', phone)
    results["clean_phone"] = clean_phone
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞
    if not re.match(r'^(\+7|7|8)?[0-9]{10}$', clean_phone.replace('+', '')):
        print_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä)")
        return results
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ (–ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX)
    if clean_phone.startswith('8'):
        normalized_phone = '+7' + clean_phone[1:]
    elif clean_phone.startswith('7'):
        normalized_phone = '+' + clean_phone
    elif clean_phone.startswith('+7'):
        normalized_phone = clean_phone
    else:
        normalized_phone = '+7' + clean_phone
    
    results["normalized_phone"] = normalized_phone
    
    try:
        # 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ API
        print_info("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞...")
        try:
            response = requests.get(
                f"https://phoneinfoga.crvx.fr/api/numbers/{normalized_phone}/info",
                headers={'User-Agent': 'DarkIce-OSINT-Scanner/1.0'},
                timeout=10
            )
            
            if response.status_code == 200:
                phone_data = response.json()
                results["carrier"] = phone_data.get('carrier', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                results["region"] = phone_data.get('location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                print_success(f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {results['carrier']}")
                print_success(f"–†–µ–≥–∏–æ–Ω: {results['region']}")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                table_data = [
                    ["–ù–æ–º–µ—Ä", normalized_phone],
                    ["–û–ø–µ—Ä–∞—Ç–æ—Ä", results["carrier"]],
                    ["–†–µ–≥–∏–æ–Ω", results["region"]],
                    ["–§–æ—Ä–º–∞—Ç", phone_data.get('format', {}).get('international', 'N/A')]
                ]
                create_table("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ", ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"], table_data)
        except:
            print_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ")
        
        # 2. –ü–æ–∏—Å–∫ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö –∏ —Å–æ—Ü—Å–µ—Ç—è—Ö
        print_info("–ü–æ–∏—Å–∫ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö...")
        check_messengers(normalized_phone, results)
        
        # 3. –ü–æ–∏—Å–∫ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
        print_info("–ü–æ–∏—Å–∫ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö...")
        check_social_networks(normalized_phone, results)
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º/–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
        print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º...")
        check_spam_databases(normalized_phone, results)
        
        return results
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–º–µ—Ä–∞: {e}")
        return results

def check_messengers(phone, results):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–º–µ—Ä–∞ –∫ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º"""
    messengers = {
        "WhatsApp": f"https://wa.me/{phone}",
        "Telegram": f"https://t.me/{phone.replace('+', '')}",
        "Viber": f"viber://chat?number={phone}",
    }
    
    for app_name, url in messengers.items():
        results["social_mentions"].append({
            "platform": app_name,
            "url": url,
            "checked": True
        })
        print_info(f"  {app_name}: {url}")

def check_social_networks(phone, results):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö"""
    social_networks = {
        "VK": f"https://vk.com/phone/{phone}",
        "Instagram": f"https://www.instagram.com/accounts/account_recovery/?phone_number={phone}",
        "Facebook": f"https://www.facebook.com/login/identify/?phone_number={phone}",
        "Twitter": f"https://twitter.com/search?q={phone}",
        "Avito": f"https://www.avito.ru/items/phones?phone={phone}",
        "–Æ–ª–∞": f"https://youla.ru/search?phone={phone}",
    }
    
    for network, url in social_networks.items():
        results["social_mentions"].append({
            "platform": network,
            "url": url,
            "checked": True
        })
        print_info(f"  {network}: {url}")

def check_spam_databases(phone, results):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–∞—Ö —Å–ø–∞–º–µ—Ä–æ–≤"""
    spam_checkers = {
        "–ö—Ç–æ –∑–≤–æ–Ω–∏–ª": f"https://kto-zvonil.com.ua/nomer/{phone}",
        "–°–±–µ—Ä–ö—Ç–æ": f"https://sberkto.ru/{phone}",
        "–ù–æ–º–µ—Ä–û—Ä–≥": f"https://–Ω–æ–º–µ—Ä.org/{phone}",
    }
    
    for service, url in spam_checkers.items():
        try:
            response = requests.get(url, timeout=5, allow_redirects=True)
            if response.status_code == 200:
                results["spam_check"] = results.get("spam_check", [])
                results["spam_check"].append({
                    "service": service,
                    "url": url,
                    "found": True
                })
                print_warning(f"  {service}: –Ω–æ–º–µ—Ä –µ—Å—Ç—å –≤ –±–∞–∑–µ - {url}")
        except:
            pass

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
def check_phone_reputation(phone):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        response = requests.get(
            f"https://api.numverify.com/validate?number={phone}",
            timeout=10
        )
        return response.json()
    except:
        return None