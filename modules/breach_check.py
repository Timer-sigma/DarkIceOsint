import requests
import hashlib
from core.output import print_info, print_success, print_error

def investigate(target, args):
    results = {"target": target, "breaches": []}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ü–µ–ª–∏ (email –∏–ª–∏ password)
    if '@' in target:
        print_info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–∞ —É—Ç–µ—á–∫–∏: {target}")
        return check_email_breach(target)
    else:
        print_info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ —É—Ç–µ—á–∫–∏: {target[:2]}...")
        return check_password_breach(target)

def check_email_breach(email):
    results = {"type": "email", "breaches": []}
    
    try:
        # –ê–Ω–æ–Ω–∏–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ HIBP API
        email_hash = hashlib.sha1(email.encode('utf-8')).hexdigest().upper()
        prefix = email_hash[:5]
        
        response = requests.get(
            f"https://api.pwnedpasswords.com/range/{prefix}",
            headers={'User-Agent': 'DarkIce-OSINT-Scanner'},
            timeout=15
        )
        
        if response.status_code == 200:
            found = False
            for line in response.text.splitlines():
                hash_suffix, count = line.split(':')
                if email_hash[5:] == hash_suffix:
                    results["breaches"].append({
                        "breach_count": int(count),
                        "source": "HaveIBeenPwned"
                    })
                    print_warning(f"‚ö†Ô∏è  Email –Ω–∞–π–¥–µ–Ω –≤ {count} —É—Ç–µ—á–∫–∞—Ö!")
                    found = True
                    break
            
            if not found:
                print_success("‚úÖ Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Ç–µ—á–∫–∞—Ö")
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–µ—á–µ–∫: {e}")
    
    return results

def check_password_breach(password):
    results = {"type": "password", "breached": False}
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ HIBP
        password_hash = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
        prefix = password_hash[:5]
        
        response = requests.get(
            f"https://api.pwnedpasswords.com/range/{prefix}",
            headers={'User-Agent': 'DarkIce-OSINT-Scanner'},
            timeout=15
        )
        
        if response.status_code == 200:
            for line in response.text.splitlines():
                hash_suffix, count = line.split(':')
                if password_hash[5:] == hash_suffix:
                    results["breached"] = True
                    results["breach_count"] = int(count)
                    print_error(f"üö® –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ {count} —É—Ç–µ—á–∫–∞—Ö! –°—Ä–æ—á–Ω–æ —Å–º–µ–Ω–∏!")
                    return results
            
            print_success("‚úÖ –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö")
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
    
    return results