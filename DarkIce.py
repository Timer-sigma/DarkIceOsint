#!/usr/bin/env python3
"""
DarkIce OSINT Framework - Ultimate Recon Tool
"""

import sys
from core.banner import show_banner
from core.argument_parser import parse_args
from core.output import print_info, print_error, print_success, save_results

def main():
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
    show_banner()

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parse_args()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å
    if hasattr(args, 'help') and args.help:
        print_info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python darkice.py -t –¶–ï–õ–¨ [–ú–û–î–£–õ–ò]")
        print_info("–ü—Ä–∏–º–µ—Ä: python darkice.py -t example.com --all --verbose")
        sys.exit(0)

    if not any(vars(args).values()):
        print_error("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ü–µ–ª–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -h –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
        sys.exit(1)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    targets = []
    if args.file:
        try:
            with open(args.file, 'r') as f:
                targets = [line.strip() for line in f.readlines() if line.strip()]
            print_success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(targets)} —Ü–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞")
        except FileNotFoundError:
            print_error(f"–§–∞–π–ª {args.file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            sys.exit(1)
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            sys.exit(1)
    elif args.target:
        targets = [args.target]
    else:
        print_error("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -t –∏–ª–∏ -f")
        sys.exit(1)

    if not targets:
        print_error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–π –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è!")
        sys.exit(1)

    all_results = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –º–æ–¥—É–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å
    modules_to_run = []
    if args.all:
        modules_to_run = ['ip', 'domain', 'username', 'email', 'phone', 'social', 'breach']
    else:
        if args.ip: modules_to_run.append('ip')
        if args.domain: modules_to_run.append('domain')
        if args.username: modules_to_run.append('username')
        if args.email: modules_to_run.append('email')
        if args.phone: modules_to_run.append('phone')
        if args.social: modules_to_run.append('social')
        if args.breach: modules_to_run.append('breach')

    if not modules_to_run:
        print_error("–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --all –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª–∏")
        sys.exit(1)

    print_success(f"–ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª–∏: {', '.join(modules_to_run)}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
    for target in targets:
        print_info(f"\nüîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏: {target}")
        target_results = {"target": target, "modules": {}}

        try:
            # IP Lookup
            if 'ip' in modules_to_run:
                try:
                    from modules.ip_lookup import investigate as ip_investigate
                    target_results["modules"]["ip_lookup"] = ip_investigate(target, args)
                except Exception as e:
                    print_error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ IP: {e}")

            # Domain Recon
            if 'domain' in modules_to_run:
                try:
                    from modules.domain_recon import investigate as domain_investigate
                    target_results["modules"]["domain_recon"] = domain_investigate(target, args)
                except Exception as e:
                    print_error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ Domain: {e}")

            # Username Lookup
            if 'username' in modules_to_run:
                try:
                    from modules.username_lookup import investigate as username_investigate
                    target_results["modules"]["username_lookup"] = username_investigate(target, args)
                except Exception as e:
                    print_error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ Username: {e}")

            # Email Lookup
            if 'email' in modules_to_run:
                try:
                    from modules.email_lookup import investigate as email_investigate
                    target_results["modules"]["email_lookup"] = email_investigate(target, args)
                except Exception as e:
                    print_error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ Email: {e}")

            # Phone Lookup
            if 'phone' in modules_to_run:
                try:
                    from modules.phone_lookup import investigate as phone_investigate
                    target_results["modules"]["phone_lookup"] = phone_investigate(target, args)
                except Exception as e:
                    print_error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ Phone: {e}")

            # Social Media
            if 'social' in modules_to_run:
                try:
                    from modules.social_media import investigate as social_investigate
                    target_results["modules"]["social_media"] = social_investigate(target, args)
                except Exception as e:
                    print_error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ Social: {e}")

            # Breach Check
            if 'breach' in modules_to_run:
                try:
                    from modules.breach_check import investigate as breach_investigate
                    target_results["modules"]["breach_check"] = breach_investigate(target, args)
                except Exception as e:
                    print_error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ Breach: {e}")

        except KeyboardInterrupt:
            print_error("\n–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(1)
        except Exception as e:
            print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ {target}: {e}")

        all_results.append(target_results)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if args.output:
        try:
            save_results(all_results, args.output)
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    else:
        try:
            save_results(all_results)
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

    print_success("üéØ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print_info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª")

if __name__ == "__main__":
    main()